SHELL = bash
.SHELLFLAGS = -e -c
all: world

PROFILE ?= client
CF := ../config/${PROFILE}.config.json
BUILD_DIR := ../build/${PROFILE}
OBJ_DIR := ${BUILD_DIR}/obj
bin := ${BUILD_DIR}/rrclient

# Throw an error if the .json configuration file doesn't exist...
ifeq (x$(wildcard ${CF}),x)
$(error ***ERROR*** Please create ${CF} first before building -- There is an example at doc/client.json.example you can use)
endif

CFLAGS := -std=gnu11 -g -ggdb -O1 -std=gnu99 -DMG_ENABLE_IPV6=1
CFLAGS_WARN := -Wall -Wno-unused -pedantic
LDFLAGS := -lc -lm -g -ggdb -lcrypt

CFLAGS += -I.. -I${BUILD_DIR} -I${BUILD_DIR}/include $(strip $(shell cat ${CF} | jq -r ".build.cflags"))
CFLAGS += -DLOGFILE="\"$(strip $(shell cat ${CF} | jq -r '.debug.logfile'))\""
CFLAGS += -D__RRCLIENT=1
CFLAGS += $(shell pkg-config --cflags gtk+-3.0)
LDFLAGS += $(strip $(shell cat ${CF} | jq -r ".build.ldflags"))
LDFLAGS += $(shell pkg-config --libs gtk+-3.0)
TC_PREFIX := $(strip $(shell cat ${CF} | jq -r ".build.toolchain.prefix"))
PLATFORM := $(strip $(shell cat ${CF} | jq -r ".build.platform"))
#USE_ALSA = $(strip $(shell cat ${CF} | jq -r '.features.alsa'))
#USE_PIPEWIRE = $(strip $(shell cat ${CF} | jq -r '.features.pipewire'))
#USE_SQLITE = $(strip $(shell cat ${CF} | jq -r '.features.sqlite'))
USE_SSL = $(strip $(shell cat ${CF} | jq -r ".net.http.tls_enabled"))

ifeq (${USE_HAMLIB},true)
LDFLAGS += -lhamlib
endif

ifeq (${USE_OPUS},true)
LDFLAGS += $(shell pkg-config --libs opus)
CFLAGS += $(shell pkg-config --cflags opus)
endif

ifeq (${USE_SSL},true)
CFLAGS += -DMG_TLS=MG_TLS_MBED
LDFLAGS += -lmbedcrypto -lmbedtls -lmbedx509
endif

# Are we cross compiling?
ifneq (${TC_PREFIX},"")
CC := ${TC_PREFIX}-gcc
LD := ${TC_PREFIX}-ld
else
CC := gcc
LD := ld
endif

##################
# Source objects #
##################
#objs += au.o			# Audio channel stuff
#objs += au.pipe.o		# pipe / socket support
#ifeq (${USE_ALSA},true)
#objs += au.alsa.o		# ALSA on posix hosts
#endif

#ifeq (${USE_PIPEWIRE},true)
#objs += au.pipewire.o		# Pipewire on posix hosts
#CFLAGS += $(shell pkg-config --cflags libpipewire-0.3)
#LDFLAGS += $(shell pkg-config --libs libpipewire-0.3)
#endif

#objs += cat.o			# CAT parsers
#objs += cat.kpa500.o		# amplifier control (KPA-500 mode)
#objs += cat.yaesu.o		# Yaesu CAT protocol
#objs += channels.o		# Channel Memories
#objs += codec.o			# Support for audio codec
#objs += console.o		# Console support
objs += config.o
objs += debug.o			# Debug stuff
objs += dict.o			# dictionary object
#objs += gui.o			# Support for a local user-interface
objs += logger.o		# Logging facilities
objs += main.o			# main loop
objs += mongoose.o		# Mongoose http/websocket/mqtt library

ifeq (${USE_SQLITE},true)
CFLAGS += $(shell pkg-config --cflags sqlite3)
LDFLAGS += $(shell pkg-config --libs sqlite3)
endif

objs += posix.o			# support for POSIX hosts (linux or perhaps others)

#objs += timer.o			# Timers support
objs += util.file.o		# Misc file functions
objs += util.math.o		# Misc math functions
objs += util.string.o		# String utility functions
#objs += ws.o			# Websocket transport general
#objs += ws.audio.o		# Audio (raw / OPUS) over websockets
#objs += ws.chat.o		# Websocket Chat (talk)
#objs += ws.rigctl.o		# Websocket Rig Control (CAT)

# translate unprefixed object file names to source file names
src_files = $(objs:.o=.c)

# prepend objdir path to each object
real_objs := $(foreach x, ${objs}, ${OBJ_DIR}/${x})

################################################################################
###############
# Build Rules #
###############
# Remove log files, etc
extra_clean += firmware.log
# Remove autogenerated headers on clean
extra_clean += $(wildcard ${BUILD_DIR}/*.h)

# Extra things to build/clean:
extra_build += ${EEPROM_FILE}
extra_clean += ${EEPROM_FILE}

world: ${extra_build} ${bin}

BUILD_HEADERS=${BUILD_DIR}/build_config.h ${BUILD_DIR}/eeprom_layout.h $(wildcard *.h) $(wildcard ${BUILD_DIR}/*.h)
${OBJ_DIR}/%.o: %.c ${BUILD_HEADERS}
# delete the old object file, so we can't accidentally link against it...
	@${RM} -f $@
	@${CC} ${CFLAGS} ${CFLAGS_WARN} ${extra_cflags} -o $@ -c $< || exit 1
	@echo "[compile] $@ from $<"

${OBJ_DIR}/au.pipewire.o: au.pipewire.c ${BUILD_HEADERS}
	@${RM} -f $@
	@${CC} ${CFLAGS} ${extra_cflags} -o $@ -c $< || exit 1
	@echo "[compile] $@ from $<"

# Binary also depends on the .stamp file
${bin}: ${real_objs} ../ext/libmongoose/mongoose.c
	@${CC} -o $@ ${real_objs} ${LDFLAGS} || exit 1
	@echo "[Link] $@ from $(words ${real_objs}) object files..."
	@ls -a1ls $@
	@file $@
	@size $@

strip: ${bin}
	@echo "[strip] ${bin}"
	@strip ${bin}
	@ls -a1ls ${bin}

${BUILD_DIR}/build_config.h ../buildconf.pl: ${CF} ${CHANNELS} $(wildcard res/*.json)
	@echo "[buildconf]"
	set -e; (cd ..; ./buildconf.pl ${PROFILE})

##################
# Source Cleanup #
##################
clean:
	@echo "[clean]"
	${RM} ${bin} ${real_objs} ${extra_clean}

distclean: clean
	@echo "[distclean]"
	${RM} -r build
	${RM} -f config/archive/*.json *.log

###############
# DFU Install #
###############
install:
	@echo "Automatic DFU installation isn't supported yet... Please see doc/INSTALLING.txt for more info"

###################
# Running on host #
###################
# Run debugger
run: ${EEPROM_FILE} ${bin}
	@echo "[run] ${bin}"
	@${bin}

gdb debug: ${bin} ${EEPROM_FILE}
	@echo "[gdb] ${bin}"
	@gdb ${bin} -ex 'run'

test: clean world run

#########################
# Rebuild a clean image #
#########################
rebuild clean-build cleanbuild: distclean ../buildconf.pl world

#################
# Configuration #
#################
../res/bandplan.json:
	exit 1

../res/eeprom_layout.json:
	exit 1

../res/eeprom_types.json:
	exit 1

# Display an error message and halt the build, if no configuration file
${CF}:
	@echo "********************************************************"
	@echo "* PLEASE read README.txt and edit ${CF} as needed *"
	@echo "********************************************************"
	exit 1

../ext/libmongoose/mongoose.c:
	@echo "You forgot to git submodule init; git submodule update. Doing it for you!"
	git submodule init
	git submodule update
