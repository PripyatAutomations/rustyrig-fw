=========
= fwdsp =
=========
* Start all decoder (RX) and leave them running, to prevent TX delays after extended idle

============
= rrclient =
============
[general]
* Add mute/unmute button for RX audio which halts sending the samples entirely
* Add throttled reconnect like webui has
* Finish parsing server messages
* Implement rest of controls typically used (CTCSS tone for FM)
* Finish whois/reason dialogs
* Add more error messages when privileges denied, etc. (server side)
* Fill out Config tab form which can generate rrclient.cfg
  - For now we have the text editor, bug check and fix it!
* Add a start/stop RX audio button for saving bw isntead of just muting
  - or maybe send the mute/unmute to server who will start/stop sending samples
    as well as sending a start/stop message so gstreamer can be paused
* Fix userlist updates so joins/quits properly update it
* Fix PTT button needing clicked twice after TOT fired
  - Maybe change the PTT button color to a warning color (yellow?) if TOT expiry happens
? Move the input box to be permanently visible at bottom, with the button bar above it when in chat
* Make VFO widgets floating
* C4FM
   - Show FM dailog

[win64]
* Testing and bug fixes

[bluetooth]
* Support bluetooth PTT buttons
* Maybe automate routing of headsets when connected, if reasonably feasible?

[cfgedit]
* Should we dump the in-memory active configuration rather than editing the on-disk file? This would lose comments but is more correct!

[gui]
* Make all windows hide/restore with the main window, even if modal
* Deal with hidden window attribute

===============
= librustyrig =
===============
[CAT]
* Implement control over unix pipes in posix mode
* Implement control over stm32 serial over usb

[logger/debug]
* Add support for configuring masks of what debug level messages will be seen using wildcards
* Add support for masking out messages such as '-*.noisy'
? Add support for rate limiting messages?

[Porting]
minimal inet_ntop() for non-posix

============
= rrserver =
============
[protocol]
* Instead of blorping out the rig status once a second, lets do broadcasts only when changed or every 30 seconds plus on-connect

[audio]
ws.c / fwdsp-mgr.c:
	ws_txtframe_process: media.codec handling
	   * Remove codec enum and just pass 4 byte ID
	   * Use fwdsp_codec_start instead of fwdsp_find_or_create, so we setup all the audio stuff not just the subproc
* Finish implement recordings, saved in the ptt database & path.record

[audit]
* Add support for TX quotas (credits) and tracking top talkers

[buildconf]
- Support for loading older (input) eeprom layouts, according to version saved in the EEPROM, for upgrading
  - see res/archive/*
* Remove need for offset & key properties
  - Offset should be calculated based on a running offset, then jump to absolute (@1234 style offsets)

[core]
* If session is being kicked/banned/muted, check if it has PTT active and drop PTT before kicking
* Make rigctl connection autoreconnect in backend.hamlib
* Support for at least VFO A & B
* Test TX halt when PTTing user disconnects.
  - also halt TX by FLAG_NOOB users if the last admin logs out
- Make options to trim it back down for stm32/esp32 hosts
- Make mongoose truly optional for the cases it doesn't make sense (small devs)
- Need to review the libmongoose deps and ensure we can still build without mongoose
  for cases it's not appropriate (stand-alone firmware on stm32/esp32 for example)
  where we don't have a network client

[eeprom/config]
* remove need for they key field (why not use the name of the entry itself?) in eeprom_layout
* fix relative offsets in eeprom_layout
? Create a minimal tokenization of eeprom name references, so we don't have to store full strings all over
- Make a tool which converts res/eeprom_layout.json (and eeprom_types.json) to a text file like doc/eeprom.txt
* Fix net/bind to be an ip4 or ip6 type instead of string!
* more work to integrate config into eeprom
  - work on dict and just load/save changed parts of the eeprom
    - Read into new empty dict
    - dict_diff to get changed keys (include option to for unique flags only / both / only changed)
    - If eeprom write delay expired, save to eeprom
    - On exit, etc
  - read eeprom into config / channels dict on posix
* May just compress the flat-file with a light compressor that will spread eeprom wear and pack that into eeprom?

[elmer mode]
* Implement request and accept|deny for elevate privileges
  - store which elmers accepted in the acptr->en_data->elmers
  - store noobs under elmer's en_data->noobs
  - If either user disconnects, clear these
  - If last elmer for the noob leaves, disable their privileges
  - Once an elmer is online, the user can again request elevate

[i2c/eeprom]
- Implement hard coded address for i2c eeprom and a codepath to support it
- Should we bypass the eeprom step and read directly from the config & channels.json on posix?
  - Maybe a use sqlite3 db for storing persistent data?

[makefile]
- Make things so that make debug forces a make clean & adding make debug if last built without debug (can we use nm or such to check symbols?)
* Shell + jq script to parse config/*.config.json into a basic .cfg flat file

[mqtt]
* Finish mqtt server stuff (via mongoose)
* Implement mqtt client mode, for sending status to existing server(s)

[Network]
    net/ip4 and net/ip6 split
    net/prefer_ip4
    net/ignore_icmp_echo
    net/ignore_mcast
    net/ignore_bcast

[porting]
- Shorten strings where possible
- Wrap strings for storage as appropriate on micros (stm32? ;)

[radioberry]
* Implement support for this thing

============
= Protocol =
============
* Implement ALERT message that pops up for all users (for shutdown, overheat, SWR alerts).
* User management
  - Add/edit users
  - Reset password
  - User change own password
* CW-U and CW-L
   - CW is centered on the CW dial freq; CW-L is center and width below; CW-R is center and width above

=========
= WebUI =
=========
* Sync protocol with native client additions
* mute the join/parts when reconecting
* Send user-info when they join instead of every time CUL is updated
  - This will save a fair bit of data transfer over the length of a session
    - probably a few mbytes
* Send a bundle hash for the app when ws connects, so client can reload assets as needed
* move stuff to local/sessionStorage so we can reload the script without disconnecting!
  - uodate components in cache when server says a newer version available
* Change the window title to show unread messages
- Pasting images
  - Expire incomplete images from memory after a few minutes
  - Make sure we're cleaning up image data when no longer used
  - FIX MINIMIZE BUTTON!
* Fix tab highlights
* Implement Web Serial firmare uploads
        https://developer.chrome.com/articles/serial/
        https://developer.mozilla.org/en-US/docs/Web/API/Web_Serial_API
        - js/zmodemjs for zmodem upload
* When we reconnect, we should send a ping with our auth token
  - The server may respond with "expired" to tell us our session is invalid or a new token
    if the session is still valid.
* display a Reconnecting symbol on top in the corner
? Rework the http_client stuff so that instead of being removed on disconnected,
  we just use a last-seen time to expire their session. We should never have a ton
  of people connected to the radio, so it should be fine this way
* Implement tabbed/windowed modes with movable/resizable windows (overlapping)

[www.chat]
* Support saving the chat log
- Should we allow selecting text for copy/paste?
  - maybe cfg tab option?


============
= wishlist =
============
* Use libbaresip UA to pass control json and audio from gstreamer, so we can use whatever codec we want
  - Should reduce audio latency even further
  - Could be a path for non-mongoose builds
