diff --git a/au.c b/au.c
index 646beb2..feb302a 100644
--- a/au.c
+++ b/au.c
@@ -11,6 +11,7 @@
 //
 // Most of the ugly bits should go in the per-backend sources
 //
+// XXX: This needs split back out into au.pipe.c and au.c
 #include "inc/config.h"
 #include <stddef.h>
 #include <stdarg.h>
@@ -32,62 +33,61 @@
 #include "inc/cat.h"
 #include "inc/posix.h"
 #include "inc/au.h"
-#include "inc/au.alsa.h"
 #include "inc/au.pipe.h"
-#include "inc/au.pipewire.h"
 #include "inc/ws.h"
 #include "inc/fwdsp-shared.h"
 
-// XXX: This needs moved to config/${profile}.fwdsp.json:fwdsp.channels.name['rx'].path
-#define SOCKET_PATH_RX "./run/rustyrig_rx.pipe"
-#define SOCKET_PATH_TX "./run/rustyrig_tx.pipe"
+bool au_pipe_init(void);
 
-rr_au_backend_interface_t au_backend_null = {
-    .backend_type = AU_BACKEND_NULL_SINK,
-    .init = NULL,
-    .write_samples = NULL,
-    .read_samples = NULL,
-    .cleanup = NULL
+rr_au_backend_interface_t au_backend_pipe = {
+    .backend_type = AU_BACKEND_PIPE,
+    .init = au_pipe_init,
+//    .write_samples = rr_au_write_samples,
+//    .read_samples = rr_au_read_samples,
+//    .cleanup = rr_au_cleanup
 };
 
+rr_au_backend_interface_t *au_be = &au_backend_pipe;
+
 bool rr_au_init(void) {
-    rr_au_backend_interface_t *be = &au_backend_null;
+    rr_au_backend_interface_t *au_be = &au_backend_pipe;
 
     // Initialize the selected backend
-    if (be && be->init) {
-        return be->init();
+    if (au_be && au_be->init) {
+        return au_be->init();
     }
     return true;
 }
 
 bool rr_au_write_samples(rr_au_backend_interface_t *be ,const void *samples, size_t size) {
     if (be->write_samples) {
-        return be->write_samples(samples, size);
+        return be->write_samples(be, samples, size);
     }
     return false;
 }
 
 rr_au_sample_t **rr_au_read_samples(rr_au_backend_interface_t *be) {
     if (be->read_samples) {
-        return be->read_samples();
+        return be->read_samples(be);
     }
     return NULL;
 }
 
 void rr_au_cleanup(rr_au_backend_interface_t *be, rr_au_device_t *dev) {
     if (be->cleanup) {
-        be->cleanup(dev);
+        be->cleanup(be, dev);
     }
 }
 
 ///////////////////
 // Audio Sockets //
 ///////////////////
-static const char *rx_socket_path = SOCKET_PATH_RX;
-static const char *tx_socket_path = SOCKET_PATH_TX;
+static const char *socket_path = FWDSP_SOCKET_PATH;
+fwdsp_client_t fwdsp_client_list[MAX_FWDSP_CHANNELS];
 
-int rx_server_fd = -1;
-int rx_client_fd = -1;
+int listenfd = -1;
+int rx_client_fd = -1;		// RX path client
+int tx_client_fd = -1;		// TX path client
 
 int setup_rx_unix_socket_server(const char *path) {
    struct sockaddr_un addr = {0};
@@ -127,37 +127,46 @@ int setup_rx_unix_socket_server(const char *path) {
    return fd;
 }
 
-void close_client() {
-   if (rx_client_fd >= 0) {
-      close(rx_client_fd);
-      rx_client_fd = -1;
+void close_client(fwdsp_client_t *cli) {
+   if (cli->fd >= 0) {
+      close(cli->fd);
+      cli->fd = -1;
+   }
+}
+
+void close_clients(void) {
+   for (int i = 0; i < MAX_FWDSP_CHANNELS; i++) {
+      if (fwdsp_client_list[i].fd >= 0) {
+         close_client(&fwdsp_client_list[i]);
+      }
    }
 }
 
-void close_server() {
-   if (rx_server_fd >= 0) {
-      close(rx_server_fd);
-      rx_server_fd = -1;
-      unlink(rx_socket_path);
+void close_server(void) {
+   if (listenfd >= 0) {
+      close(listenfd);
+      listenfd = -1;
+      unlink(socket_path);
    }
 }
 
-void au_unix_socket_init(void) {
-   rx_server_fd = setup_rx_unix_socket_server(SOCKET_PATH_RX);
+bool au_pipe_init(void) {
+   listenfd = setup_rx_unix_socket_server(FWDSP_SOCKET_PATH);
 
-   if (rx_server_fd < 0) {
+   if (listenfd < 0) {
       Log(LOG_DEBUG, "au", "Failed to create UNIX server socket");
    }
+   return false;
 }
 
 void au_unix_socket_cleanup(void) {
-   close_client();
+   close_clients();
    close_server();
 }
 
 void au_unix_socket_poll(void) {
    // Accept new connections if any
-   int client_fd = accept(rx_server_fd, NULL, NULL);
+   int client_fd = accept(listenfd, NULL, NULL);
 
    if (client_fd >= 0) {
       Log(LOG_INFO, "audio", "fwdsp connected on UNIX socket (fd=%d)", client_fd);
@@ -165,28 +174,30 @@ void au_unix_socket_poll(void) {
       // Set non-blocking for client socket
       fcntl(client_fd, F_SETFL, O_NONBLOCK);
       rx_client_fd = client_fd;
-      return; // accept one connection per poll, or loop if you want multiple
+      return;
    } else if (errno != EAGAIN && errno != EWOULDBLOCK) {
-      perror("accept");
+      Log(LOG_WARN, "audio", "fwdsp accept() error: %d (%s) on fd %d", errno, strerror(errno), client_fd);
    }
 
-   if (rx_client_fd < 0) {
+   fwdsp_client_t *fwdsp = &fwdsp_client_list[0];
+
+   if (fwdsp->fd < 0) {
       // No connected client
       return;
    }
 
    // Read from the client socket
    uint8_t buf[4096];
-   ssize_t n = read(rx_client_fd, buf, sizeof(buf));
+   ssize_t n = read(fwdsp->fd, buf, sizeof(buf));
 
    if (n > 0) {
-//      Log(LOG_DEBUG, "audio", "Read %zd bytes from UNIX socket client (fd=%d)", n, rx_client_fd);
+//      Log(LOG_DEBUG, "audio", "Read %zd bytes from UNIX socket client (fd=%d)", n, fwdsp->fd);
       broadcast_audio_to_ws_clients(buf, n);
    } else if (n == 0) {
       // Client closed connection
-      Log(LOG_INFO, "au", "fwdsp disconnected (fd=%d)", rx_client_fd);
-      close(rx_client_fd);
-      rx_client_fd = -1;
+      Log(LOG_INFO, "au", "fwdsp disconnected (fd=%d)", fwdsp->fd);
+      close(fwdsp->fd);
+      fwdsp->fd = -1;
    } else if (n < 0) {
       if (errno == EAGAIN || errno == EWOULDBLOCK) {
          // No data available, not an error
@@ -194,9 +205,9 @@ void au_unix_socket_poll(void) {
       }
       // Real error reading
       perror("read");
-      Log(LOG_WARN, "au", "fwdsp read error on UNIX socket client (fd=%d), closing", rx_client_fd);
-      close(rx_client_fd);
-      rx_client_fd = -1;
+      Log(LOG_WARN, "au", "fwdsp read error on UNIX socket client (fd=%d), closing", fwdsp->fd);
+      close(fwdsp->fd);
+      fwdsp->fd = -1;
    }
 }
 
@@ -216,5 +227,7 @@ static bool parse_format_header(int fd, struct audio_header *hdr_out) {
       return false;
    }
 
+   Log(LOG_DEBUG, "au", "format: %d", hdr_out->format);
+
    return true;
 }
diff --git a/au.pipe.c b/au.pipe.c
index d815b7e..fba756b 100644
--- a/au.pipe.c
+++ b/au.pipe.c
@@ -20,6 +20,7 @@
 #include <stdio.h>
 
 
+/*
 typedef struct {
     int pipe_fd;  // File descriptor for the pipe/socket
 } rr_au_pipe_device_t;
@@ -49,3 +50,4 @@ rr_au_backend_interface_t au_backend_pipe = {
 //    .cleanup = pipe_cleanup
 };
 
+*/
\ No newline at end of file
diff --git a/fwdsp-main.c b/fwdsp-main.c
index 3f520eb..538105a 100644
--- a/fwdsp-main.c
+++ b/fwdsp-main.c
@@ -43,6 +43,14 @@ bool running = true;
 static GstElement *pipeline = NULL;
 time_t now = -1;                // time() called once a second in main loop to update
 
+struct audio_config cfg = {
+   .template = NULL,
+   .sample_rate = 16000,
+   .format = 0,
+   .tx_mode = false,
+   .channel_id = -1
+};
+
 static int connect_unix_socket(const char *path) {
    int fd = socket(AF_UNIX, SOCK_STREAM, 0);
 
@@ -159,20 +167,8 @@ int main(int argc, char *argv[]) {
    gst_init(&argc, &argv);
    gst_debug_add_log_function(gst_log_handler, NULL, NULL);
 
-   struct audio_config cfg = {
-      .template = NULL,
-      .sample_rate = 16000,
-      .format = 0,
-      .tx_mode = false,
-      .channel_id = -1
-   };
-
    // set sane defaults
-   if (cfg.tx_mode) {
-      cfg.sock_path = DEFAULT_SOCKET_PATH_TX;
-   } else {
-      cfg.sock_path = DEFAULT_SOCKET_PATH_RX;
-   }
+   cfg.sock_path = FWDSP_SOCKET_PATH;
 
    int opt;
    while ((opt = getopt(argc, argv, "c:i:s:P:p:hrtx")) != -1) {
@@ -255,5 +251,7 @@ int main(int argc, char *argv[]) {
 }
 
 void shutdown_app(int signum) {
+   Log(LOG_DEBUG, "fwdsp", "Instance for %s ch %d shutting down",
+       (cfg.tx_mode ? "TX" : "RX"), cfg.channel_id);
    exit(signum);
 }
diff --git a/inc/au.h b/inc/au.h
index 7fb9d86..7a4e77d 100644
--- a/inc/au.h
+++ b/inc/au.h
@@ -21,17 +21,28 @@ typedef enum {
 } rr_au_backend_t;
 
 typedef float rr_au_sample_t;
-
 typedef struct rr_au_device_t rr_au_device_t;
 
-typedef struct {
+typedef struct rr_au_backend_interface rr_au_backend_interface_t;
+struct rr_au_backend_interface {
     rr_au_backend_t backend_type;
     bool (*init)(void);
-    bool (*write_samples)(const void *samples, size_t size);
-    rr_au_sample_t **(*read_samples)(void);
-    void (*cleanup)(rr_au_device_t *dev);
-} rr_au_backend_interface_t;
-
+    bool (*write_samples)(rr_au_backend_interface_t *be, const void *samples, size_t size);
+    rr_au_sample_t **(*read_samples)(rr_au_backend_interface_t *be);
+    void (*cleanup)(rr_au_backend_interface_t *be, rr_au_device_t *dev);
+};
+
+struct fwdsp_client {
+   int  fd;			// file descriptor for socket/pipe
+   enum {
+      FWDSP_CLI_NONE = 0,
+      FWDSP_CLI_RX,		// RX audio path
+      FWDSP_CLI_TX		// TX audio path
+   } type;
+};
+typedef struct fwdsp_client fwdsp_client_t;
+
+////
 extern bool rr_au_init(void);
 extern bool rr_au_write_samples(rr_au_backend_interface_t *be, const void *samples, size_t size);
 extern rr_au_sample_t **rr_au_read_samples(rr_au_backend_interface_t *be);
diff --git a/inc/fwdsp-shared.h b/inc/fwdsp-shared.h
index 753af5f..ee3e8b9 100644
--- a/inc/fwdsp-shared.h
+++ b/inc/fwdsp-shared.h
@@ -1,6 +1,10 @@
+#if	!defined(__inc_fwdsp_shared_h)
+#define	__inc_fwdsp_shared_h
 
-#define DEFAULT_SOCKET_PATH_TX "./run/rustyrig_tx.sock"
-#define DEFAULT_SOCKET_PATH_RX "./run/rustyrig_rx.pipe"
+#define	MAX_FWDSP_CHANNELS	2
+
+// XXX: This needs moved to config/${profile}.fwdsp.json:fwdsp.channels.name['rx'].path
+#define FWDSP_SOCKET_PATH "./run/fwdsp.pipe"
 
 struct audio_header {
    uint8_t magic[2];      // e.g. "AU"
@@ -18,3 +22,5 @@ struct audio_config {
    bool persistent;   // persistent mode, keep reconnecting until fatal signal
    int channel_id;
 };
+
+#endif	// !defined(__inc_fwdsp_shared_h)
diff --git a/main.c b/main.c
index d9d487a..b9cd154 100644
--- a/main.c
+++ b/main.c
@@ -200,7 +200,6 @@ int main(int argc, char **argv) {
    }
 
    rr_au_init();
-   au_unix_socket_init();
 
 #if	defined(FEATURE_OPUS)
    codec_init();
