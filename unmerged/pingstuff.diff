diff --git a/auth.c b/auth.c
index 00650aa..0ed53d8 100644
--- a/auth.c
+++ b/auth.c
@@ -383,10 +383,10 @@ bool ws_handle_auth_msg(struct mg_ws_message *msg, struct mg_connection *c) {
       char resp_buf[HTTP_WS_MAX_MSG+1];
       memset(resp_buf, 0, sizeof(resp_buf));
 
-
       Log(LOG_AUDIT, "auth", "Login request from user %s on mg_conn:<%x> from %s:%d", user, c, ip, port);
 
-      http_client_t *cptr = http_add_client(c, true);
+      http_client_t *cptr = MG_CONN_CPTR(c);
+
       if (cptr == NULL) {
          Log(LOG_CRIT, "auth", "Discarding login request on mg_conn:<%x> from %s:%d due to NULL cptr?!?!!?", c, ip, port);
          rv = true;
diff --git a/http.c b/http.c
index 8d4f89f..d039ede 100644
--- a/http.c
+++ b/http.c
@@ -359,7 +359,10 @@ static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
    }
 
    if (ev == MG_EV_ACCEPT) {
-//      Log(LOG_AUDIT, "http", "Accepted connection on mg_conn:<%x> from %s:%d", c, ip, port);
+      Log(LOG_CRAZY, "http", "Accepted connection on mg_conn:<%x> from %s:%d", c, ip, port);
+      http_client_t *cptr = http_add_client(c, false);
+      MG_CONN_CPTR(c) = cptr;
+      Log(LOG_DEBUG, "http", "c:<%x> cptr:<%x>", c, cptr);
 
 #if	defined(HTTP_USE_TLS)
       if (c->fn_data != NULL) {
@@ -550,45 +559,49 @@ bool ws_send_ping(http_client_t *cptr) {
 //
 // Called periodically to remove sessions that have existed too long
 //
-// XXX: We also should do pings for cliebts
 void http_expire_sessions(void) {
    http_client_t *cptr = http_client_list;
    int expired = 0;
 
-   while(cptr != NULL) {
-      if (cptr == NULL) {
-         break;
-      }
-
-      // Boot expired sessions
-      if (cptr->session_expiry <= now) {
-         expired++;
-         time_t last_heard = (now - cptr->last_heard);
-         Log(LOG_AUDIT, "http.auth", "Kicking expired session (%lu sec old, last heard %lu sec ago) for %s",
-             HTTP_SESSION_LIFETIME, last_heard, cptr->chatname);
-         ws_kick_client(cptr, "Login session expired!");
-      // Check for ping timeouts
-      } else if (cptr->last_ping < (now - HTTP_PING_TIMEOUT)) {
-         // Client has timed out
-         Log(LOG_AUDIT, "http.auth", "Client connection <%x> for user %s timed out, disconnecting", cptr, cptr->chatname);
-         ws_kick_client(cptr, "Ping timeout");
-      // Have they been quiet for too long? Send a ping and wait for reply or timeout (above)
-      } else if (cptr->last_heard < (now - HTTP_PING_TIME)) { // Client hasn't been heard from in awhile, send a ping
-         ws_send_ping(cptr);
+   while (cptr != NULL) {
+      if (cptr->is_ws) {
+         // Expired session?
+         if (cptr->session_expiry > 0 && cptr->session_expiry <= now) {
+            expired++;
+            time_t last_heard = now - cptr->last_heard;
+            Log(LOG_AUDIT, "http.auth", "Kicking expired session on cptr:<%x> (%lu sec old, last heard %lu sec ago) for user %s",
+                cptr, HTTP_SESSION_LIFETIME, last_heard, cptr->chatname);
+            ws_kick_client(cptr, "Login session expired!");
+
+         // Ping timeout?
+         } else if (cptr->last_ping != 0 && (now - cptr->last_ping) > HTTP_PING_TIMEOUT) {
+            Log(LOG_AUDIT, "http.auth", "Client conn at cptr:<%x> for user %s timed out, disconnecting", cptr, cptr->chatname);
+            ws_kick_client(cptr, "Ping timeout");
+         // Time to send a ping?
+         } else if (cptr->last_ping == 0 && (now - cptr->last_heard) >= HTTP_PING_TIME) {
+            ws_send_ping(cptr);
+         }
+      } else { // Not websocket
+         if (cptr->connected > 0 && !cptr->session_start && (now - cptr->connected) >= HTTP_AUTH_TIMEOUT) {
+            Log(LOG_AUDIT, "http.auth", "Client at mg_conn:<%x> didn't authenticate in time, booting.", cptr);
+            ws_kick_client(cptr, "Auth timeout");
+         }
       }
+      cptr = cptr->next;
    }
 }
